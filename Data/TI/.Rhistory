library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(jsonlite)
library(readxl)
library(stringr)
# sets the working directory.
setwd("C://Users//HUAWEI//Desktop//Projects//Cast-Away//Data")
# reads in the World Bank data.
read_WB_data <- function(indicator_name) {
data <- read_xls(paste0("WB//",
indicator_name,
".xls"),
range = "A4:BM271") %>%
gather(key = "year",
value = indicator_name,
5:65) %>%
select(!c(2:4,))
colnames(data) <- c("country",
"year",
indicator_name)
return(data)
}
# creates a data frame with multiple variables.
data_frame <- read_WB_data("gdp_per_capita") %>%
left_join(read_WB_data("secondary_enrollment")) %>%
left_join(read_WB_data("tertiary_enrollment")) %>%
left_join(read_WB_data("researchers"))
# creates a list of indicators to not include.
unwanted_indicators <- c("World",
"Arab World",
"Caribbean small states",
"Central Europe and the Baltics",
"East Asia & Pacific",
"East Asia & Pacific (excluding high income)",
"Euro area",
"Europe & Central Asia",
"Europe & Central Asia (excluding high income)",
"European Union",
"Fragile and conflict affected situations",
"Heavily indebted poor countries (HIPC)",
"Latin America & Caribbean",
"Latin America & Caribbean (excluding high income)",
"Least developed countries: UN classification",
"Middle East & North Africa",
"Middle East & North Africa (excluding high income)",
"North America",
"OECD members",
"Other small states",
"Pacific island small states",
"Small states",
"South Asia",
"Sub-Saharan Africa",
"Sub-Saharan Africa (excluding high income)",
"High income",
"Low & middle income",
"Low income",
"Lower middle income",
"Middle income",
"Upper middle income",
"Not classified",
"Africa Eastern and Southern",
"Africa Western and Central",
"Early-demographic dividend",
"IBRD only",
"IDA & IBRD total",
"IDA total",
"IDA blend",
"IDA only",
"Late-demographic dividend",
"Pre-demographic dividend",
"Post-demographic dividend",
"East Asia & Pacific (IDA & IBRD countries)",
"Europe & Central Asia (IDA & IBRD countries)",
"Latin America & the Caribbean (IDA & IBRD countries)",
"Middle East & North Africa (IDA & IBRD countries)",
"South Asia (IDA & IBRD)",
"Sub-Saharan Africa (IDA & IBRD countries)")
# filters out unwanted indicators.
filtered_indicators <- data_frame %>%
filter(!country %in% unwanted_indicators)
# drops rows with na values in the country column.
no_country_na <- filtered_indicators[-which(is.na(filtered_indicators$country)),]
# transforms the year field from character to numeric.
no_country_na$year <- as.numeric(no_country_na$year)
# adds a decade column.
decade_added <- no_country_na %>%
mutate(decade = (floor(year / 10)) * 10)
# shows how many data points there are for each decade.
table(decade_added$decade)
# drops the unwanted decades.
dropped_decades <- decade_added %>%
filter(!decade %in% c(1960, 1970, 1980, 1990, 2000, 2020))
# drops the decades column.
dropped_decades <- dropped_decades[,-ncol(dropped_decades)]
# sets the working directory.
setwd("C://Users//HUAWEI//Desktop//Projects//Cast-Away//Data//TI")
# reads in the transparency international data.
TI_data <- read_xls("all_corruption.xls")
# creates a list of the unique countries in both data frames.
TI <- sort(unique(TI_data$Country))
WB <- sort(unique(dropped_decades$country))
# creates a list of world bank countries not
# in transparency international's data.
WB_idenntical <- WB[which(WB %in% TI)]
non_idenntical <- WB[which(!WB %in% TI)]
# checks if any TI country names appear as parts
# of those in the non_idenntical list.
check_non_idenntical <- function(data) {
scores <- list()
for(i in 1:length(data)) {
scores[[i]] <- if(mean(str_detect(data[i], non_idenntical))>0) TRUE else FALSE
}
return(data[unlist(scores)])
}
check_non_idenntical(TI)
# checks if any non_idenntical country names appear
# as parts of those in the TI list.
check_TI <- function(data) {
scores <- list()
for(i in 1:length(data)) {
scores[[i]] <- if(mean(str_detect(data[i], TI))>0) TRUE else FALSE
}
return(data[unlist(scores)])
}
check_TI(non_idenntical)
# creates a data frame of countries in both data
# frames with different names.
same_names <- tibble(WB = c("United States",
"Bahamas, The",
"Congo, Rep.",
"Congo, Dem. Rep.",
"Egypt, Arab Rep.",
"Gambia, The",
"Guinea-Bissau",
"Hong Kong SAR, China",
"Iran, Islamic Rep.",
"Russian Federation",
"Syrian Arab Republic",
"Venezuela, RB",
"Yemen, Rep."),
TI = c("United States of America",
"Bahamas",
"Congo",
"Democratic Republic of the Congo",
"Egypt",
"Gambia",
"Guinea Bissau",
"Hong Kong",
"Iran",
"Russia",
"Syria",
"Venezuela",
"Yemen"))
# changes all TI country names in same_names to their WB version.
for(i in 1:nrow(same_names)) {
TI_data$Country <- str_replace_all(TI_data$Country, same_names$TI[i], same_names$WB[i])
}
# checks again which country names are in the WB
# but not TI list.
TI <- sort(unique(TI_data$Country))
WB <- sort(unique(filtered_indicators$country))
non_idenntical <- WB[which(!WB %in% TI)]
# creates a data frame of countries in both data
# frames with different names.
same_names <- tibble(WB = c("Korea, Dem. People's Rep.",
"Kyrgyz Republic",
"Czech Republic",
"Korea, Rep.",
"Lao PDR",
"Slovak Republic",
"St. Lucia",
"St. Vincent and the Grenadines",
"Congo, Dem. Rep."),
TI = c("Korea, North",
"Kyrgyzstan",
"Czechia",
"Korea, South",
"Laos",
"Slovakia",
"Saint Lucia",
"Saint Vincent and the Grenadines",
"Congo, Dem. Rep., Rep."))
# changes all TI country names in same_names to their WB version.
for(i in 1:nrow(same_names)) {
TI_data$Country <- str_replace_all(TI_data$Country, same_names$TI[i], same_names$WB[i])
}
# checks again which country names are in the WB
# but not TI list
TI <- sort(unique(TI_data$Country))
WB <- sort(unique(no_country_na$country))
idenntical <- WB[which(WB %in% TI)]
non_idenntical <- WB[which(!WB %in% TI)]
# checks which country names are in the TI but
# not WB list.
drop <- which(!TI %in% WB)
# removes country names from the TI list not
# in the WB list.
TI <- TI[-drop]
TI_data <- TI_data[-drop,]
# creates a tidy data frame for the TI data.
tidy_TI_data <- TI_data %>%
gather(key = year, value = corruption, -1) %>%
rename(country = Country) %>%
filter(!year == 2020)
# creates new data for each country in the
# non_identical list.
create_country_data <- function(year, data) {
country_data <- list()
for(i in 1:length(unique(data))) {
country_data[[i]] <- tibble(country = data[i],
year = year,
corruption = NA)
}
return(rbind_pages(country_data))
}
# creates new data for each year in the
# non_identical list.
create_year_data <- function(year, data) {
year_data <- list()
for(i in 1:length(unique(year))) {
year_data[[i]] <- create_country_data(year[i],data)
}
return(tibble(rbind_pages(year_data)))
}
# creates a data frame of NA values the countries
# present in the WB but not TI data frame.
new_data <- create_year_data(unique(tidy_TI_data$year)[1:8], non_idenntical)
# creates a new data frame for the years 2010 and 2011.
extra_years <- create_year_data(c(2010, 2011), non_idenntical)
# combines the new data with the tidy TI data frame
# and arranges it by country name.
combined_data_frame <- tidy_TI_data %>%
rbind(new_data) %>%
rbind(extra_years) %>%
mutate(year = as.numeric(year)) %>%
arrange(country, year)
# saves the new data frame to a csv file.
write_csv(combined_data_frame, "TI_adjusted_data.csv")
# reads in the adjusted transparency international
# corruption perceptions index data frame.
TI <- read_csv("TI_adjusted_data.csv")
TI
