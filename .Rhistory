gather(key=measure, value = value, -c(1,2)) %>%
filter(measure %in% variable) %>%
ggplot(aes(x=value, fill=measure)) +
geom_histogram(alpha=0.6,
position="identity",
bins=20) +
facet_wrap(~measure,
scales="free",
ncol=2) +
ggtitle("Histogram") +
my_theme
return(histogram)
}
# creates a qqplot.
make_qqplot <- function(variable) {
qqplot <- merged_data_frame %>%
gather(key = measure, value = value, -c(1,2)) %>%
filter(measure %in% variable) %>%
ggplot(aes(sample=value, col=measure)) +
geom_qq(position="identity") +
geom_qq_line(position="identity") +
facet_wrap(~measure,
scales="free",
ncol=2) +
ggtitle("QQplot") +
my_theme
return(qqplot)
}
# creates a scatter plot.
make_scatter_plot <- function(data, x, y) {
scatter <- data %>%
gather(key = measure, value = value, -c("country",
"year",
y)) %>%
filter(measure %in% x) %>%
ggplot(aes(x=value,
y=eval(parse(text=y)),
col=measure)) +
geom_point() +
geom_smooth(method='lm',
formula=y~x) +
facet_wrap(~measure,
ncol=3,
scales="free") +
my_theme
return(scatter)
}
# my personal plot theme for data visualizations.
my_theme <- theme_economist_white(gray_bg = FALSE) +
theme(plot.title = element_text(hjust = 0.5,
vjust = 15,
size = 10,
color = "#474747"),
plot.margin = unit(c(1.5, 1, 1.5, 1), "cm"),
axis.text = element_text(size = 9,
color = "gray30"),
axis.text.x=element_text(vjust = -2.5),
axis.title.x = element_text(size = 9,
color = "gray30",
vjust = -10),
axis.title.y = element_text(size = 9,
color = "gray30",
vjust = 10),
legend.direction = "vertical",
legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 11,
color = "gray20"),
legend.margin=margin(1, -15, 1, 0),
legend.spacing.x = unit(0.25, "cm"),
legend.key.size = unit(1, "cm"),
legend.key.height = unit(0.75, "cm"),
strip.text = element_text(hjust = 0.5,
vjust = 1,
size = 10,
color = "#474747"),
panel.spacing = unit(2, "lines"))
# reads in the merged data data frame.
merged_data_frame <- read_csv("merged_data_frame.csv") %>%
mutate(gov_effectivness = as.numeric(gov_effectivness),
rule_of_law = as.numeric(rule_of_law))
# creates groups of variables to be used in transformations.
hc_vars <- c("country", "secondary_enrollment", "tertiary_enrollment", "researchers")
inst_vars <- c("country", "corruption", "gov_effectivness", "rule_of_law")
all_vars <- c(hc_vars[-1], inst_vars[-1])
### --- 1. GDP PER CAPITA ---
# checks the distribution with a histogram and qqplot.
make_histogram("gdp_per_capita")
make_qqplot("gdp_per_capita")
# transforms gdp per capita into log values.
merged_data_frame$log_gdp_per_capita <- log(merged_data_frame$gdp_per_capita)
# checks the distribution with a histogram and qqplot.
make_histogram("log_gdp_per_capita")
make_qqplot("log_gdp_per_capita")
# transforms the gdp per capita variable into
# its z score distribution.
merged_data_frame <- merged_data_frame %>%
mutate(log_gdp_per_capita = get_z_scores(log_gdp_per_capita))
# creates a data frame containing the z scores for the
# gdp per capita variable.
gdp_per_capita <- merged_data_frame[,c("country", "log_gdp_per_capita")] %>%
group_by(country) %>%
summarise(gdp_per_capita = get_avg(log_gdp_per_capita))
# creates a scatter plot for all of the
# variables against log GDP per capita.
make_scatter_plot(data=merged_data_frame, x=all_vars, y="log_gdp_per_capita")
### --- 2. GDP PER CAPITA ---
# lists the landlocked countries in our sample.
landlocked <- c("Afghanistan",
"Armenia",
"Austria",
"Azerbaijan",
"Burundi",
"Burkina Faso",
"Belarus",
"Bolivia",
"Botswana",
"Central African Republic",
"Switzerland",
"Czech Republic",
"Hungary",
"Kazakhstan",
"Kyrgyz Republic",
"Lao PDR",
"Lesotho",
"North Macedonia",
"Mali",
"Mongolia",
"Malawi",
"Niger",
"Nepal",
"West Bank and Gaza",
"Rwanda",
"Serbia",
"South Sudan",
"Slovak Republic",
"Eswatini",
"Chad",
"Tajikistan",
"Turkmenistan",
"Uganda",
"Uzbekistan",
"Kosovo",
"Zambia",
"Zimbabwe")
# creates an ocean access variable for non-landlocked countries.
ocean_access <- list()
for(i in 1:length(unique(merged_data_frame$country))) {
ocean_access[[i]] <- if(!merged_data_frame$country[i] %in% landlocked) 1 else 0
}
ocean_access <- tibble(country = unique(merged_data_frame$country),
ocean_access = unlist(ocean_access))
### --- 3. HUMAN CAPITAL ---
# checks the distribution with a histogram and qqplot.
make_histogram(hc_vars)
make_qqplot(hc_vars)
# transforms the variables.
merged_data_frame$tertiary_enrollment <- merged_data_frame$tertiary_enrollment**(1/2)
merged_data_frame$researchers <- merged_data_frame$researchers**(1/6)
# checks the distribution with a histogram and qqplot.
make_histogram(hc_vars)
make_qqplot(hc_vars)
# transforms the education variables into
# their z score distributions.
merged_data_frame <- merged_data_frame %>%
mutate(secondary_enrollment = get_z_scores(secondary_enrollment),
tertiary_enrollment = get_z_scores(tertiary_enrollment),
researchers = get_z_scores(researchers))
# creates a data frame containing the z scores for the
# human capital variables.
human_capital <- get_tidy_z_scores(hc_vars)
# gets the average z score for the human capital variables.
human_capital_avg_z_scores <- get_avg_z_scores("human_capital")
### --- 4. INSTITUTIONS ---
# checks the distribution with a histogram and qqplot.
make_histogram(inst_vars)
make_qqplot(inst_vars)
# transforms the variables.
merged_data_frame$corruption <- merged_data_frame$corruption**(1/3)
# checks the distribution with a histogram and qqplot.
make_histogram(inst_vars)
make_qqplot(inst_vars)
# transforms the institutions variables into
# their z score distributions.
merged_data_frame <- merged_data_frame %>%
mutate(corruption = get_z_scores(corruption),
gov_effectivness = get_z_scores(gov_effectivness),
rule_of_law = get_z_scores(rule_of_law))
# creates a data frame containing the z scores for our
# institutions variables.
institutions <- get_tidy_z_scores(inst_vars)
# gets the average z score for the institutions variables.
institutions_avg_z_scores <- get_avg_z_scores("institutions")
### --- 5. CREATE FINAL DATA FRAME ---
# creates a final table for the combined variables.
variables_table <- gdp_per_capita %>%
left_join(ocean_access) %>%
left_join(human_capital_avg_z_scores) %>%
left_join(institutions_avg_z_scores)
# drops the entries with NA values for institutions.
remain <- variables_table[!is.na(variables_table$gdp_per_capita) & !variables_table$human_capital==0,]
# saves the data to a csv file
write_csv(remain, "clean_variables_table.csv")
view(remain)
remain
mean(is.na(variables_table$gdp_per_capita))
mean(is.na(remain$gdp_per_capita))
mean(is.na(remain$ocean_access))
mean(is.na(remain$human_capital))
mean(is.na(remain$institutions))
mean(remain$human_capital==0))
mean(remain$human_capital==0)
mean(remain$institutions==0)
view(remain)
# drops the entries with NA values for institutions.
remain <- variables_table[!is.na(variables_table$gdp_per_capita) & !variables_table$human_capital==0 & !variables_table$institutions==0,]
remain
mean(remain$institutions==0)
# saves the data to a csv file
write_csv(remain, "clean_variables_table.csv")
# sets the working directory.
setwd("C://Users//HUAWEI//Desktop//Projects//Cast-Away//Data")
# opens the clean data frame.
clean_variables_table <- read_csv("clean_variables_table.csv")
# creates the variable for the regression analysis.
y <- clean_variables_table$gdp_per_capita
ocean_access <- clean_variables_table$ocean_access
human_capital <- clean_variables_table$human_capital
institutions <- clean_variables_table$institutions
# fits the regression model.
fit <- lm(y~ocean_access+human_capital+institutions)
summary(fit)
# creates a final table for the combined variables.
vars <- gdp_per_capita %>%
left_join(ocean_access) %>%
left_join(human_capital_avg_z_scores) %>%
left_join(institutions_avg_z_scores)
# creates a final table for the combined variables.
vars <- gdp_per_capita %>%
left_join(ocean_access) %>%
left_join(human_capital_avg_z_scores) %>%
left_join(institutions_avg_z_scores)
# creates a final table for the combined variables.
variables_table <- gdp_per_capita %>%
left_join(ocean_access) %>%
left_join(human_capital_avg_z_scores) %>%
left_join(institutions_avg_z_scores)
gdp_per_capita
ocean_access
library(dplyr)
library(tidyverse)
library(ggplot2)
library(ggthemes)
library(jsonlite)
library(readxl)
library(stringr)
# sets the working directory.
setwd("C://Users//HUAWEI//Desktop//Projects//Cast-Away//Data")
# gets the z scores for each data distribution given it.
get_z_scores <- function(data) {
mean <- mean(data[!is.na(data)])
sigma <- sd(data[!is.na(data)])
z_scores <- list()
for(i in 1:length(data)) {
z_scores[i] <- if(is.na(data[i])) NA else (data[i] - mean) / sigma
}
return(unlist(z_scores))
}
# gets the average NA adjusted average value for a column.
get_avg <- function(var) {
avg <- sum(var[!is.na(var)])/length(var[!is.na(var)])
return(avg)
}
# creates a tidy data frame of the z scores for 3 variables.
get_tidy_z_scores <- function(vars) {
df <- merged_data_frame[,vars] %>%
group_by(country) %>%
summarise(var_1 = get_avg(eval(parse(text=vars[2]))),
var_2 = get_avg(eval(parse(text=vars[3]))),
var_3 = get_avg(eval(parse(text=vars[4]))))
colnames(df) <- vars
final_df <- df %>%
gather(key = measure, value = value, -1)
return(final_df)
}
# gets the average z score for 3 variables.
get_avg_z_scores <- function(z_scores) {
df <- eval(parse(text=z_scores)) %>%
group_by(country) %>%
summarise(col =sum(value[!is.na(value)]/length(value[!is.na(value)])))
colnames(df)[2] <- z_scores
return(df)
}
# creates a histogram.
make_histogram <- function(variable) {
histogram <- merged_data_frame %>%
gather(key=measure, value = value, -c(1,2)) %>%
filter(measure %in% variable) %>%
ggplot(aes(x=value, fill=measure)) +
geom_histogram(alpha=0.6,
position="identity",
bins=20) +
facet_wrap(~measure,
scales="free",
ncol=2) +
ggtitle("Histogram") +
my_theme
return(histogram)
}
# creates a qqplot.
make_qqplot <- function(variable) {
qqplot <- merged_data_frame %>%
gather(key = measure, value = value, -c(1,2)) %>%
filter(measure %in% variable) %>%
ggplot(aes(sample=value, col=measure)) +
geom_qq(position="identity") +
geom_qq_line(position="identity") +
facet_wrap(~measure,
scales="free",
ncol=2) +
ggtitle("QQplot") +
my_theme
return(qqplot)
}
# creates a scatter plot.
make_scatter_plot <- function(data, x, y) {
scatter <- data %>%
gather(key = measure, value = value, -c("country",
"year",
y)) %>%
filter(measure %in% x) %>%
ggplot(aes(x=value,
y=eval(parse(text=y)),
col=measure)) +
geom_point() +
geom_smooth(method='lm',
formula=y~x) +
facet_wrap(~measure,
ncol=3,
scales="free") +
my_theme
return(scatter)
}
# my personal plot theme for data visualizations.
my_theme <- theme_economist_white(gray_bg = FALSE) +
theme(plot.title = element_text(hjust = 0.5,
vjust = 15,
size = 10,
color = "#474747"),
plot.margin = unit(c(1.5, 1, 1.5, 1), "cm"),
axis.text = element_text(size = 9,
color = "gray30"),
axis.text.x=element_text(vjust = -2.5),
axis.title.x = element_text(size = 9,
color = "gray30",
vjust = -10),
axis.title.y = element_text(size = 9,
color = "gray30",
vjust = 10),
legend.direction = "vertical",
legend.position = "right",
legend.title = element_blank(),
legend.text = element_text(size = 11,
color = "gray20"),
legend.margin=margin(1, -15, 1, 0),
legend.spacing.x = unit(0.25, "cm"),
legend.key.size = unit(1, "cm"),
legend.key.height = unit(0.75, "cm"),
strip.text = element_text(hjust = 0.5,
vjust = 1,
size = 10,
color = "#474747"),
panel.spacing = unit(2, "lines"))
# reads in the merged data data frame.
merged_data_frame <- read_csv("merged_data_frame.csv") %>%
mutate(gov_effectivness = as.numeric(gov_effectivness),
rule_of_law = as.numeric(rule_of_law))
# creates groups of variables to be used in transformations.
hc_vars <- c("country", "secondary_enrollment", "tertiary_enrollment", "researchers")
inst_vars <- c("country", "corruption", "gov_effectivness", "rule_of_law")
all_vars <- c(hc_vars[-1], inst_vars[-1])
### --- 1. GDP PER CAPITA ---
# checks the distribution with a histogram and qqplot.
make_histogram("gdp_per_capita")
make_qqplot("gdp_per_capita")
# transforms gdp per capita into log values.
merged_data_frame$log_gdp_per_capita <- log(merged_data_frame$gdp_per_capita)
# checks the distribution with a histogram and qqplot.
make_histogram("log_gdp_per_capita")
make_qqplot("log_gdp_per_capita")
# transforms the gdp per capita variable into
# its z score distribution.
merged_data_frame <- merged_data_frame %>%
mutate(log_gdp_per_capita = get_z_scores(log_gdp_per_capita))
# creates a data frame containing the z scores for the
# gdp per capita variable.
gdp_per_capita <- merged_data_frame[,c("country", "log_gdp_per_capita")] %>%
group_by(country) %>%
summarise(gdp_per_capita = get_avg(log_gdp_per_capita))
# creates a scatter plot for all of the
# variables against log GDP per capita.
make_scatter_plot(data=merged_data_frame, x=all_vars, y="log_gdp_per_capita")
### --- 2. GDP PER CAPITA ---
# lists the landlocked countries in our sample.
landlocked <- c("Afghanistan",
"Armenia",
"Austria",
"Azerbaijan",
"Burundi",
"Burkina Faso",
"Belarus",
"Bolivia",
"Botswana",
"Central African Republic",
"Switzerland",
"Czech Republic",
"Hungary",
"Kazakhstan",
"Kyrgyz Republic",
"Lao PDR",
"Lesotho",
"North Macedonia",
"Mali",
"Mongolia",
"Malawi",
"Niger",
"Nepal",
"West Bank and Gaza",
"Rwanda",
"Serbia",
"South Sudan",
"Slovak Republic",
"Eswatini",
"Chad",
"Tajikistan",
"Turkmenistan",
"Uganda",
"Uzbekistan",
"Kosovo",
"Zambia",
"Zimbabwe")
# creates an ocean access variable for non-landlocked countries.
ocean_access <- list()
for(i in 1:length(unique(merged_data_frame$country))) {
ocean_access[[i]] <- if(!merged_data_frame$country[i] %in% landlocked) 1 else 0
}
ocean_access <- tibble(country = unique(merged_data_frame$country),
ocean_access = unlist(ocean_access))
### --- 3. HUMAN CAPITAL ---
# checks the distribution with a histogram and qqplot.
make_histogram(hc_vars)
make_qqplot(hc_vars)
# transforms the variables.
merged_data_frame$tertiary_enrollment <- merged_data_frame$tertiary_enrollment**(1/2)
merged_data_frame$researchers <- merged_data_frame$researchers**(1/6)
# checks the distribution with a histogram and qqplot.
make_histogram(hc_vars)
make_qqplot(hc_vars)
# transforms the education variables into
# their z score distributions.
merged_data_frame <- merged_data_frame %>%
mutate(secondary_enrollment = get_z_scores(secondary_enrollment),
tertiary_enrollment = get_z_scores(tertiary_enrollment),
researchers = get_z_scores(researchers))
# creates a data frame containing the z scores for the
# human capital variables.
human_capital <- get_tidy_z_scores(hc_vars)
# gets the average z score for the human capital variables.
human_capital_avg_z_scores <- get_avg_z_scores("human_capital")
### --- 4. INSTITUTIONS ---
# checks the distribution with a histogram and qqplot.
make_histogram(inst_vars)
make_qqplot(inst_vars)
# transforms the variables.
merged_data_frame$corruption <- merged_data_frame$corruption**(1/3)
# checks the distribution with a histogram and qqplot.
make_histogram(inst_vars)
make_qqplot(inst_vars)
# transforms the institutions variables into
# their z score distributions.
merged_data_frame <- merged_data_frame %>%
mutate(corruption = get_z_scores(corruption),
gov_effectivness = get_z_scores(gov_effectivness),
rule_of_law = get_z_scores(rule_of_law))
# creates a data frame containing the z scores for our
# institutions variables.
institutions <- get_tidy_z_scores(inst_vars)
# gets the average z score for the institutions variables.
institutions_avg_z_scores <- get_avg_z_scores("institutions")
### --- 5. CREATE FINAL DATA FRAME ---
# creates a final table for the combined variables.
vars <- gdp_per_capita %>%
left_join(ocean_access) %>%
left_join(human_capital_avg_z_scores) %>%
left_join(institutions_avg_z_scores)
vars
# drops the entries with NA values for institutions.
remain <- vars[!is.na(vars$gdp_per_capita) & !vars$human_capital==0 & !vars$institutions==0,]
# saves the data to a csv file
write_csv(remain, "clean_variables_table.csv")
# sets the working directory.
setwd("C://Users//HUAWEI//Desktop//Projects//Cast-Away//Data")
# opens the clean data frame.
clean_variables_table <- read_csv("clean_variables_table.csv")
# creates the variable for the regression analysis.
y <- clean_variables_table$gdp_per_capita
ocean_access <- clean_variables_table$ocean_access
human_capital <- clean_variables_table$human_capital
institutions <- clean_variables_table$institutions
# fits the regression model.
fit <- lm(y~ocean_access+human_capital+institutions)
summary(fit)
